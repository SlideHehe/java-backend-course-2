app:
  database-access-type: jpa
  scheduler:
    enable: true
    interval: 30s
    force-check-delay: 1000s
  github-client:
    base-url: https://api.github.com
    retry:
      backoff-policy: exponential
      max-attempts: 3
      initial-backoff: 10s
      retryable-codes: 429, 500, 503
  stackoverflow-client:
    base-url: https://api.stackexchange.com/2.3
    retry:
      backoff-policy: exponential
      max-attempts: 3
      initial-backoff: 10s
      retryable-codes: 429, 500, 503
  bot-client:
    base-url: http://localhost:8090
    retry:
      backoff-policy: exponential
      max-attempts: 3
      initial-backoff: 10s
      retryable-codes: 429, 500, 503
  use-queue: true
  kafka:
    updates-topic:
      name: updates
      partitions: 1
      replicas: 1
    producer-properties:
      bootstrap-servers: localhost:9092
      acks-mode: all
      delivery-timeout: 60s
      linger-ms: 12_000
      batch-size: 1024

spring:
  application:
    name: scrapper
  datasource:
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  swagger-ui:
    path: /swagger-ui

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: .*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request limit\" }"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 100
              time: 1
              unit: hours

management:
  server:
    port: 18080
  endpoints:
    enabled-by-default: false
    web:
      base-path: "/"
      exposure:
        include: "health,info,prometheus"
      path-mapping:
        prometheus: "metrics"
  endpoint:
    health:
      enabled: true
    info:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
