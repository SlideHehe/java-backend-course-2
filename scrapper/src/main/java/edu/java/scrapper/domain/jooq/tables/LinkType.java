/*
 * This file is generated by jOOQ.
 */

package edu.java.scrapper.domain.jooq.tables;

import edu.java.scrapper.domain.jooq.Keys;
import edu.java.scrapper.domain.jooq.Public;
import edu.java.scrapper.domain.jooq.tables.Link.LinkPath;
import edu.java.scrapper.domain.jooq.tables.records.LinkTypeRecord;
import java.util.Collection;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class LinkType extends TableImpl<LinkTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.link_type</code>
     */
    public static final LinkType LINK_TYPE = new LinkType();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<LinkTypeRecord> getRecordType() {
        return LinkTypeRecord.class;
    }

    /**
     * The column <code>public.link_type.type</code>.
     */
    public final TableField<LinkTypeRecord, String> TYPE =
        createField(DSL.name("type"), SQLDataType.VARCHAR(63).nullable(false), this, "");

    private LinkType(Name alias, Table<LinkTypeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private LinkType(Name alias, Table<LinkTypeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.link_type</code> table reference
     */
    public LinkType(String alias) {
        this(DSL.name(alias), LINK_TYPE);
    }

    /**
     * Create an aliased <code>public.link_type</code> table reference
     */
    public LinkType(Name alias) {
        this(alias, LINK_TYPE);
    }

    /**
     * Create a <code>public.link_type</code> table reference
     */
    public LinkType() {
        this(DSL.name("link_type"), null);
    }

    public <O extends Record> LinkType(
        Table<O> path,
        ForeignKey<O, LinkTypeRecord> childPath,
        InverseForeignKey<O, LinkTypeRecord> parentPath
    ) {
        super(path, childPath, parentPath, LINK_TYPE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LinkTypePath extends LinkType implements Path<LinkTypeRecord> {

        private static final long serialVersionUID = 1L;

        public <O extends Record> LinkTypePath(
            Table<O> path,
            ForeignKey<O, LinkTypeRecord> childPath,
            InverseForeignKey<O, LinkTypeRecord> parentPath
        ) {
            super(path, childPath, parentPath);
        }

        private LinkTypePath(Name alias, Table<LinkTypeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LinkTypePath as(String alias) {
            return new LinkTypePath(DSL.name(alias), this);
        }

        @Override
        public LinkTypePath as(Name alias) {
            return new LinkTypePath(alias, this);
        }

        @Override
        public LinkTypePath as(Table<?> alias) {
            return new LinkTypePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    @Nullable
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    @NotNull
    public UniqueKey<LinkTypeRecord> getPrimaryKey() {
        return Keys.LINK_TYPE_PKEY;
    }

    private transient LinkPath _link;

    /**
     * Get the implicit to-many join path to the <code>public.link</code> table
     */
    public LinkPath link() {
        if (_link == null) {
            _link = new LinkPath(this, null, Keys.LINK__FK_LINK_TYPE.getInverseKey());
        }

        return _link;
    }

    @Override
    @NotNull
    public LinkType as(String alias) {
        return new LinkType(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public LinkType as(Name alias) {
        return new LinkType(alias, this);
    }

    @Override
    @NotNull
    public LinkType as(Table<?> alias) {
        return new LinkType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkType rename(String name) {
        return new LinkType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkType rename(Name name) {
        return new LinkType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public LinkType rename(Table<?> name) {
        return new LinkType(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType where(Condition condition) {
        return new LinkType(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public LinkType where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public LinkType where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public LinkType where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    @PlainSQL
    public LinkType where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @NotNull
    public LinkType whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
