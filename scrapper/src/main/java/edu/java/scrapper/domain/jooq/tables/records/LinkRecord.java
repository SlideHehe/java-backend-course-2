/*
 * This file is generated by jOOQ.
 */
package edu.java.scrapper.domain.jooq.tables.records;


import edu.java.scrapper.domain.jooq.tables.Link;

import jakarta.validation.constraints.Size;

import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class LinkRecord extends UpdatableRecordImpl<LinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.link.id</code>.
     */
    public void setId(@Nullable Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.link.id</code>.
     */
    @Nullable
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.link.url</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.link.url</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.link.updated_at</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.link.updated_at</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.link.checked_at</code>.
     */
    public void setCheckedAt(@Nullable OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.link.checked_at</code>.
     */
    @Nullable
    public OffsetDateTime getCheckedAt() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.link.type</code>.
     */
    public void setType(@NotNull String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.link.type</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 63)
    @NotNull
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.link.answer_count</code>.
     */
    public void setAnswerCount(@Nullable Integer value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.link.answer_count</code>.
     */
    @Nullable
    public Integer getAnswerCount() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.link.comment_count</code>.
     */
    public void setCommentCount(@Nullable Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.link.comment_count</code>.
     */
    @Nullable
    public Integer getCommentCount() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.link.pull_request_count</code>.
     */
    public void setPullRequestCount(@Nullable Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.link.pull_request_count</code>.
     */
    @Nullable
    public Integer getPullRequestCount() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>public.link.commit_count</code>.
     */
    public void setCommitCount(@Nullable Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.link.commit_count</code>.
     */
    @Nullable
    public Integer getCommitCount() {
        return (Integer) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LinkRecord
     */
    public LinkRecord() {
        super(Link.LINK);
    }

    /**
     * Create a detached, initialised LinkRecord
     */
    @ConstructorProperties({ "id", "url", "updatedAt", "checkedAt", "type", "answerCount", "commentCount", "pullRequestCount", "commitCount" })
    public LinkRecord(@Nullable Long id, @NotNull String url, @Nullable OffsetDateTime updatedAt, @Nullable OffsetDateTime checkedAt, @NotNull String type, @Nullable Integer answerCount, @Nullable Integer commentCount, @Nullable Integer pullRequestCount, @Nullable Integer commitCount) {
        super(Link.LINK);

        setId(id);
        setUrl(url);
        setUpdatedAt(updatedAt);
        setCheckedAt(checkedAt);
        setType(type);
        setAnswerCount(answerCount);
        setCommentCount(commentCount);
        setPullRequestCount(pullRequestCount);
        setCommitCount(commitCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinkRecord
     */
    public LinkRecord(edu.java.scrapper.domain.jooq.tables.pojos.Link value) {
        super(Link.LINK);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setUpdatedAt(value.getUpdatedAt());
            setCheckedAt(value.getCheckedAt());
            setType(value.getType());
            setAnswerCount(value.getAnswerCount());
            setCommentCount(value.getCommentCount());
            setPullRequestCount(value.getPullRequestCount());
            setCommitCount(value.getCommitCount());
            resetChangedOnNotNull();
        }
    }
}
